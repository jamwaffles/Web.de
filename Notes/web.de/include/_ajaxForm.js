// this script uses AJAX to duplicate the process of submitting form data to a server via a submit button (POST) by
// creating a query string and submitting via GET.


function sendData(objXMLreq,query,target,success,failed,busy,timeout,inactive,verbose) {
// this function sends a request to the script to be processed then informs the user of the outcome.  Return codes
// are as follows: 1=success,0=inactivity timeout,-1=invalid query value,-2=busy,-3=browser not supported
// objXMLreq	this is the variable name to use for the XML request
// query	[string] the URI (including all key=value pairs) to send the AJAX request
// target	[string] the name of the form object to receive HTML output generated by the AJAX request (from the server).  A null value disables.
//		* for any "code" parameter below, pass '' for no additional processing
// success	[string] code to execute on a successful AJAX call (the server processing was successful)
// failed	[string] code to execute on a failed AJAX call (there was an error on the server processing the request)
// busy	[string] code to execute if this function is already processing an AJAX request
// timeout	[string] code to execute on a processing AJAX call that timed out in communicating with the server
// inactive	[string] code to execute if a server returns the string 'reload' indicating a user has been inactive to long
// verbose	[integer] the level of verbosity. 0=none 1=support 2=timeout,support 3=busy,timeout,support 4=all
// strName	[string][optional] name when loading cities into a combobox (this is for this project only)

   if (query == '') {							// if there was no passed data, exit this function
	// the below line was added specifically for this project
	if (document.getElementById('divMeter').style.display == 'block') { hideMeter(); }
	if (verbose>3) { alert("You must pass a value in for 'query' to know where\nto send the AJAX request."); }
	return -1;
   }

// LEFT OFF - maybe convert callVarious to an array so this function can handle mutliple calls at a time (each can keep track of their index value in the array - whether its on or off)
//	would it be safe to change callVarious where the 'return 1' current is (as the request has already been sent to the server)?
   if (callVarious) {							// if we're already processing an AJAX request, then...
	// the below line was added specifically for this project
	if (document.getElementById('divMeter').style.display == 'block') { hideMeter(); }
	if (verbose>2) { alert("A request is currently being processed.  Please\nwait until it's completed before trying again."); }
	if (busy != '') { eval(busy); }					// execute busy code if passed
	return -2;
   } else { callVarious = true; }					// change the global variable so that the same request can't be initiated at the same time

   if (window.XMLHttpRequest)						// for all browsers except microsoft
	{ objXMLreq = new XMLHttpRequest(); }
   else if (window.ActiveXObject)					// for Microsoft
	{ objXMLreq = new ActiveXObject("Microsoft.XMLHTTP"); }
   else {
	// the below line was added specifically for this project
	if (document.getElementById('divMeter').style.display == 'block') { hideMeter(); }
	if (verbose) { alert("Unfortunately your browser doesn't support ajax requests.\nPlease upgrade your browser to a current version."); }
	return -3;
   }

   // the below line was added specifically for this project -AND- it must come before the below code since the argument count gets changed
   if (arguments.length > 9) { var strName=arguments[9]; } else { var strName=''; }

   document.body.style.cursor = "wait";					// change the mouse cursor to indicate that a process is happening
   if (objXMLreq) {
	objXMLreq.open("GET", query);					// start a GET request

	objXMLreq.onreadystatechange = function() {
	   if (objXMLreq.readyState == 1) {				// this if statement creates a way to abort the request and let the user know what happened.
		setTimeout(function() {					// this never gets returned since it's in a setTimeout call
		   if (objXMLreq.readyState != 4) {
			callVarious=false;
			objXMLreq.abort();
			document.body.style.cursor = "default";		// change the mouse cursor back to the default to indicate the job was completed
			// the below line was added specifically for this project
			if (document.getElementById('divMeter').style.display == 'block') { hideMeter(); }
			if (verbose>1) { alert("The request timed out, please try again."); }
			if (timeout != '') { eval(timeout); }		// execute reqTimeout code if passed
		   }
		}, 20000);
	   }
	   if (objXMLreq.readyState == 4) {
		//alert(objXMLreq.responseText);			// for debugging

// LEFT OFF - this was the former code that was run (which wouldn't have run anyways): document.location.href='http://<?php echo $urlWhole; ?>';
		// this section deals with a server returning ONLY the text 'reload'  -OR-  '<reload />' as a returned XML element  -OR-  "<extra ... action='reload' />" as an attribute to an 'extra' XML element
		if (objXMLreq.responseText == 'reload' || (objXMLreq.responseXML && objXMLreq.responseXML.getElementsByTagName("reload").item(0))) {
		   // the below line was added specifically for this project
		   if (document.getElementById('divMeter').style.display == 'block') { hideMeter(); }
		   if (inactive != '') { eval(inactive); }
		   return 0;
		}
		if (objXMLreq.responseXML && objXMLreq.responseXML.getElementsByTagName("extra").item(0)) {
		   var e = objXMLreq.responseXML.getElementsByTagName("extra").item(0);
		   if (e.hasAttribute('action') && e.getAttribute('action') == 'reload') {
			// the below line was added specifically for this project
			if (document.getElementById('divMeter').style.display == 'block') { hideMeter(); }
			if (inactive != '') { eval(inactive); }
			return 0;
		   }
		}

		if (objXMLreq.responseXML && objXMLreq.responseXML.getElementsByTagName("s").item(0)) {			// if there was no errors, hide the "popup"
		   if (objXMLreq.responseXML.getElementsByTagName("msg").item(0)) { alert(objXMLreq.responseXML.getElementsByTagName("msg").item(0).firstChild.data); }
		   if (objXMLreq.responseXML.getElementsByTagName("status").item(0)) { status = objXMLreq.responseXML.getElementsByTagName("status").item(0).firstChild.data; }
		   if (objXMLreq.responseXML.getElementsByTagName("data").item(0)) { data = objXMLreq.responseXML.getElementsByTagName("data").item(0).firstChild.data; }

		   // below section was also added specifically for this project to process the cities for each state/province/region
		   if (objXMLreq.responseXML.getElementsByTagName("c").item(0)) {
			var cities = objXMLreq.responseXML.getElementsByTagName("c");
			for (var i=0; i<cities.length; i++)
			   { Add2List('cmb'+strName+'City',cities[i].firstChild.data,cities[i].firstChild.data,0,0,0); }
		   }

		   if (success != '') { eval(success); }		// execute success code if passed
		} else if (objXMLreq.responseXML && objXMLreq.responseXML.getElementsByTagName("f").item(0)) {
		   if (objXMLreq.responseXML.getElementsByTagName("msg").item(0)) { alert(objXMLreq.responseXML.getElementsByTagName("msg").item(0).firstChild.data); }
		   if (objXMLreq.responseXML.getElementsByTagName("status").item(0)) { status = objXMLreq.responseXML.getElementsByTagName("status").item(0).firstChild.data; }
		   if (objXMLreq.responseXML.getElementsByTagName("data").item(0)) { data = objXMLreq.responseXML.getElementsByTagName("data").item(0).firstChild.data; }
		   if (success != '') { eval(failed); }			// execute success code if passed
		} else if (target != '') {				// if we want the output from the server sent as the innerHTML for a form object, then... (NOTE: this is after the <f> processing so any error messages can be displayed to the user)
		   document.getElementById(target).innerHTML = objXMLreq.responseText;
		   if (objXMLreq.responseText != '' && success != '') { eval(success); }
		   if (objXMLreq.responseText == '' && success != '') { eval(failed); }
		} else { alert(objXMLreq.responseText); }		// this captures and displays error messages

		callVarious=false;
		document.body.style.cursor = "default";			// change the mouse cursor back to the default to indicate the job was completed
		// the below line was added specifically for this project
		if (document.getElementById('divMeter').style.display == 'block') { hideMeter(); }
	   }
	}
	objXMLreq.send(null);
	return 1;
   }
}


function ajaxSubmit(strFormName,strBtnName,boolBtnDisable,strAddQuery,codeSuccess,codeFail,boolSkipSubmits,boolSkipDisabled) {
// performs an AJAX form submission so the user doesn't have to perform the standard button submission.
// NOTE: this doesn't work with checkbox arrays.
// strFormName	the name of the form containing the form objects to submit
// strBtnName	the name of the button that was clicked to submit (blank values disable submitting its value)
// boolBtnDisable	true values disable the pressed button (so it can't be pressed twice)
// strAddQuery	additional string to add onto the AJAX query (must already be formatted, escaped, and begin with a '&')
// codeSuccess	the code to execute on a successful AJAX call
// codeFail	the code to execute on a failed AJAX call
// boolSkipSubmits	skips processing any 'submit' buttons
// boolSkipDisabled	skips any disabled form objects
// *		any appended parameters need to be the names of select-multiple objects whose entire list values
//		get sent regardless of what's currently selected. To process what is selected, don't pass their
//		names as additional parameters to this function.
//		NOTE: names must be VERBATIM as they are on the form (including any trailing '[]' for php users)
   var query='',prior='',strTemp='',e=document.forms[strFormName].elements;

   if (boolBtnDisable) { document.getElementById(strBtnName).disabled = true; }
   for (var i=0; i<e.length; i++) {
	if (boolSkipDisabled && e[i].disabled) { continue; }		// skip 'disabled' object if requested

	// BUTTONS
	if (e[i].type == 'button' && e[i].name != strBtnName) { continue; }
	if (e[i].type == 'submit' && boolSkipSubmits) { continue; }	// skip 'submit' buttons if requested

	// RADIO BUTTONS
	if (e[i].type == 'radio') {
	   if (prior == e[i].name) { strTemp=''; continue; }		// reset the strTemp value -AND- skip any other unchecked radio buttons
	   prior=e[i].name;						// store the name so only one in the array gets processed
	   strTemp = findCheckedValue(e[i].name,'value');
	}

	// SELECT LISTS
	if (e[i].type == 'select-multiple') {				// for any multiple select listboxes...
	   var passedObj=0;
	   for (var k=8; k<arguments.length; k++)			// this for loop determines how multiple-select object values should be processed
		{ if (arguments[k] == e[i].name) {passedObj=1; break;} }

	   if (passedObj) {						// IF the select object was passed as an additional parameter, then...
		for (var j=0; j<e[i].length; j++)			//   go through each option and submit its values (regardless if selected)
		   { query += '&'+e[i].name+'='+escape(e[i].options[j].value); }
	   } else {							// OTHERWISE, we need to process ONLY what is selected, so...
		for (var j=0; j<e[i].length; j++) {			//   go through each option and submit ONLY its selected values
		   if (e[i].options[j].selected)
		      { query += '&'+e[i].name+'='+escape(e[i].options[j].value); }
		}
	   }
	   continue;							// since we've already updated the query string, go to the next iteration of the top most 'for' loop
	}

	// QUERY STRING CONSTRUCTION
	if (strTemp == '')
	   { query += '&'+e[i].name+'='+escape(e[i].value); }
	else
	   { query += '&'+e[i].name+'='+escape(strTemp); }
   }
   query = query.substring(1) + strAddQuery;				// remove the very first '&' symbol prior to submitting the AJAX request
   //alert("query is:\n"+query);					// for debugging

   // AJAX CALL TO SERVER
//   showMeter('Submitting data to server...');
//   sendData(reqVarious,"http://"+urlWhole+"/default.php?"+query,"hideMeter();","hideMeter();");		// sendData(request variable, query string, code to execute upon success, code to execute upon failure);
// LEFT OFF - we need to be able to define what domain and script to execute when calling this function (as a passed parameter
   sendData(reqVarious,"http://"+urlWhole+"/ads.php?"+query,'',codeSuccess,codeFail,'','','',4);
}


function ajaxRetrieve() {
// maybe pass this a form name and it will cycle through each form object to store its related value from the server
// using selListbox() and other custom built functions. may have to pass the values back in the same order they are
// cycled (and detecting what the object is [eg textbox, select, button, etc], it will know whether to assign a
// value or call the selListbox() function, etc. -OR- you can perhaps name the db values and the form objects the same.
}


function findCheckedValue(strObjArrayName,strValue2Return) {
// This function goes through the object array and returns the specified value (currently: 'value','name').
   var e=document.getElementsByName(strObjArrayName);
   for (var i=0; i<e.length; i++) {
	if (e[i].checked) {
	   if (strValue2Return == 'value') { return e[i].value; }
	   else if (strValue2Return == 'name') { return e[i].name; }
	}
   }
}
